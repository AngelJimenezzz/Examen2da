@page "/productos"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations

<h3 class="text-center">Registro de Productos</h3>

<EditForm Model="_producto" OnValidSubmit="GuardarProducto">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Número de Inventario</label>
        <InputNumber class="form-control" @bind-Value="_producto.NumeroInventario" />
        <ValidationMessage For="@(() => _producto.NumeroInventario)" />
    </div>

    <div class="mb-3">
        <label>Nombre</label>
        <InputText class="form-control" @bind-Value="_producto.Nombre" />
        <ValidationMessage For="@(() => _producto.Nombre)" />
    </div>

    <div class="mb-3">
        <label class="form-label d-block">Departamento</label>
        <InputRadioGroup @bind-Value="_producto.Departamento">
            <div class="form-check form-check-inline">
                <InputRadio class="form-check-input" Value="@("Frutas")" />
                <label class="form-check-label">Frutas</label>
            </div>
            <div class="form-check form-check-inline">
                <InputRadio class="form-check-input" Value="@("Verduras")" />
                <label class="form-check-label">Verduras</label>
            </div>
            <div class="form-check form-check-inline">
                <InputRadio class="form-check-input" Value="@("Lacteos")" />
                <label class="form-check-label">Lácteos</label>
                <ValidationMessage For="@(() => _producto.Departamento)" />

            </div>
        </InputRadioGroup>
    </div>

    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="alert alert-danger">@_error</div>
    }

    @if (_modoEdicion)
    {
        <button class="btn btn-success me-2" type="submit">Actualizar</button>
        <button class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
    }
    else
    {
        <button class="btn btn-primary" type="submit">Guardar</button>
    }
</EditForm>

<hr />

<h5>Lista de Productos</h5>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Inventario</th>
            <th>Nombre</th>
            <th>Departamento</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var p in _productos)
        {
            <tr>
                <td>@p.NumeroInventario</td>
                <td>@p.Nombre</td>
                <td>@p.Departamento</td>
                <td>
                    <button class="btn btn-warning btn-sm me-1" @onclick="@(() => EditarProducto(p))">Editar</button>
                    <button class="btn btn-danger btn-sm" @onclick="@(() => EliminarProducto(p))">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-info mb-3" @onclick="ToggleResumen">
    @(_vistaResumen ? "Ocultar Existencias" : "Mostrar Existencias")
</button>

@if (_vistaResumen)
{
    <h5>Existencias por departamento</h5>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Frutas</th>
                <th>Verduras</th>
                <th>Lácteos</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@_productos.Count(p => p.Departamento == "Frutas")</td>
                <td>@_productos.Count(p => p.Departamento == "Verduras")</td>
                <td>@_productos.Count(p => p.Departamento == "Lacteos")</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private List<Producto> _productos = new();
    private Producto _producto = new();
    private string? _error;
    private bool _modoEdicion = false;
    private bool _vistaResumen = false;

    private void GuardarProducto()
    {
        _error = string.Empty;

        if (_modoEdicion)
        {
            var prod = _productos.FirstOrDefault(p => p.NumeroInventario == _producto.NumeroInventario);
            if (prod != null)
            {
                prod.Nombre = _producto.Nombre;
                prod.Departamento = _producto.Departamento;
            }
            _modoEdicion = false;
        }
        else
        {
            if (_productos.Any(p => p.NumeroInventario == _producto.NumeroInventario))
            {
                _error = "¡El número de inventario ya está registrado!";
                return;
            }

            _productos.Add(new Producto
                {
                    NumeroInventario = _producto.NumeroInventario,
                    Nombre = _producto.Nombre,
                    Departamento = _producto.Departamento
                });
        }

        _producto = new Producto();
    }

    private void EditarProducto(Producto p)
    {
        _producto = new Producto
            {
                NumeroInventario = p.NumeroInventario,
                Nombre = p.Nombre,
                Departamento = p.Departamento
            };
        _modoEdicion = true;
        _error = null;
    }

    private void EliminarProducto(Producto p)
    {
        _productos.Remove(p);
    }

    private void CancelarEdicion()
    {
        _producto = new Producto();
        _modoEdicion = false;
        _error = null;
    }

    private void ToggleResumen()
    {
        _vistaResumen = !_vistaResumen;
    }

    public class Producto
    {
        [Required(ErrorMessage = "El número de inventario es obligatorio")]
        [Range(1, int.MaxValue, ErrorMessage = "Debe ser un número entero positivo")]
        public int NumeroInventario { get; set; }

        [Required(ErrorMessage = "El nombre es obligatorio")]
        [MaxLength(200, ErrorMessage = "Máximo 200 caracteres")]
        public string Nombre { get; set; } = "";

        [Required(ErrorMessage = "Debe seleccionar un departamento")]
        public string Departamento { get; set; } = "";
    }
}
